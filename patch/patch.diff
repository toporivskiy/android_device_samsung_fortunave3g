diff -ur a/build/core/tasks/kernel.mk b/build/core/tasks/kernel.mk
--- a/build/core/tasks/kernel.mk	2016-02-23 18:37:53.000000000 +0000
+++ b/build/core/tasks/kernel.mk	2016-02-23 19:00:48.000000000 +0000
@@ -202,7 +202,11 @@
     ccache := $(strip $(wildcard $(ccache)))
 endif
 
-KERNEL_CROSS_COMPILE := CROSS_COMPILE="$(ccache) $(KERNEL_TOOLCHAIN_PATH)"
+ifneq ($(TARGET_KERNEL_CUSTOM_TOOLCHAIN),)     
+    KERNEL_CROSS_COMPILE := CROSS_COMPILE="$(ccache) $(ANDROID_BUILD_TOP)/prebuilts/gcc/linux-x86/arm/$(TARGET_KERNEL_CUSTOM_TOOLCHAIN)/bin/arm-eabi-"      
+else
+	KERNEL_CROSS_COMPILE := CROSS_COMPILE="$(ccache) $(KERNEL_TOOLCHAIN_PATH)"
+endif
 ccache =
 
 define mv-modules
diff -ur a/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java b/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java
--- a/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java	Wed Apr 20 08:50:20 2016
+++ b/packages/services/Telecomm/src/com/android/server/telecom/CallAudioManager.java	Thu May 12 01:31:40 2016
@@ -481,8 +481,18 @@
 
         Call call = CallsManager.getInstance().getForegroundCall();
         boolean setMsimAudioParams = SystemProperties.getBoolean("ro.multisim.set_audio_params", false);
+		boolean setSamsungRealcallParams = SystemProperties.getBoolean("ro.telephony.samsung.realcall", false);
 
         Log.v(this, "Request to change audio mode from %d to %d", oldMode, newMode);
+		
+		if(setSamsungRealcallParams) {
+            if(newMode == 0) {
+                mAudioManager.setParameters("realcall=off");
+            } else if(newMode == AudioManager.MODE_IN_COMMUNICATION || newMode == AudioManager.MODE_RINGTONE
+                || newMode == AudioManager.MODE_IN_CALL) {
+                    mAudioManager.setParameters("realcall=on");
+            }
+        }
 
         if (oldMode != newMode) {
             if (oldMode == AudioManager.MODE_IN_CALL && newMode == AudioManager.MODE_RINGTONE) {

diff -ur a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java
--- a/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java	Mon Jun 20 17:28:46 2016
+++ b/hardware/qcom/fm/fmapp2/src/com/caf/fmradio/FMRadioService.java	Mon Jun 27 10:45:01 2016
@@ -926,9 +926,19 @@
                mSpeakerPhoneOn = true;
                Log.d(LOGTAG, "Audio source set it as speaker");
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_SPEAKER);
+			   mAudioManager.setParameters("fm_mode=on");
+		       mAudioManager.setParameters("fm_radio_volume=on");
+		       mAudioManager.setParameters("FMRadioVol=0.1496235728");
+		       mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+               mAudioManager.setSpeakerphoneOn(true);
            } else {
                Log.d(LOGTAG, "Audio source set it as headset");
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+			   mAudioManager.setParameters("fm_mode=on");
+		       mAudioManager.setParameters("fm_radio_volume=on");
+		       mAudioManager.setParameters("FMRadioVol=0.1496235728");
+		       mAudioManager.setMode(AudioManager.MODE_IN_CALL);
+               mAudioManager.setSpeakerphoneOn(false);
            }
            AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_FM,
                                AudioSystem.DEVICE_STATE_AVAILABLE, "");
@@ -947,6 +957,8 @@
            stopA2dpPlayback();
        }else{
            Log.d(LOGTAG, "FMRadio: Requesting to stop FM");
+		   mAudioManager.setParameters("fm_mode=off");
+		   mAudioManager.setParameters("fm_radio_mute=1");
            AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_FM,
                                      AudioSystem.DEVICE_STATE_UNAVAILABLE, "");
        }
@@ -960,6 +972,8 @@
            resetA2dpPlayback();
        }else{
            Log.d(LOGTAG, "FMRadio: Requesting to stop FM");
+		   mAudioManager.setParameters("fm_mode=off");
+		   mAudioManager.setParameters("fm_radio_mute=1");
            AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_FM,
                                      AudioSystem.DEVICE_STATE_UNAVAILABLE, "");
            sendRecordServiceIntent(RECORD_STOP);
@@ -1168,6 +1182,7 @@
                if (audioManager != null) {
                    Log.d(LOGTAG, "Mute");
                    mMuted = true;
+				   audioManager.setParameters("fm_radio_mute=1");
                    audioManager.setStreamMute(AudioManager.STREAM_MUSIC,true);
                }
            }
@@ -2095,6 +2110,7 @@
                     stopRecording();
                 stopFM();
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+			   mAudioManager.setSpeakerphoneOn(false);
                if (mMuted) {
                    setAudioPath(true);
                } else {
@@ -2104,6 +2120,7 @@
                }
            } else {
                AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_NONE);
+			   mAudioManager.setSpeakerphoneOn(false);
            }
            if (analogmode)
                 startFM();
@@ -2131,6 +2148,7 @@
                  }
            }
            AudioSystem.setForceUse(AudioSystem.FOR_MEDIA, AudioSystem.FORCE_SPEAKER);
+		   mAudioManager.setSpeakerphoneOn(true);
            if (analogmode)
                 startFM();
        }
@@ -2231,6 +2249,7 @@
       if (audioManager != null)
       {
          mMuted = true;
+		 audioManager.setParameters("fm_radio_mute=1");
          audioManager.setStreamMute(AudioManager.STREAM_MUSIC,true);
       }
       return bCommandSent;
@@ -2251,6 +2270,7 @@
       if (audioManager != null)
       {
          mMuted = false;
+		 audioManager.setParameters("fm_radio_mute=0");
          audioManager.setStreamMute(AudioManager.STREAM_MUSIC,false);
          if (mResumeAfterCall)
          {

diff -ur a/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java b/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java
--- a/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java	Mon Jun 20 17:28:46 2016
+++ b/frameworks/base/services/core/java/com/android/server/display/DisplayManagerService.java	Mon Jun 27 10:45:01 2016
@@ -61,6 +61,8 @@
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -134,6 +136,8 @@
     private InputManagerInternal mInputManagerInternal;
     private IMediaProjectionManager mProjectionService;
 
+	public static final String TS_PATH = "/sys/class/input/input3/enabled";
+
     // The synchronization root for the display manager.
     // This lock guards most of the display manager's state.
     // NOTE: This is synchronized on while holding WindowManagerService.mWindowMap so never call
@@ -668,6 +672,36 @@
         scheduleTraversalLocked(false);
     }
 
+    // Writes to sysfs node, returns true if success, false if fail
+    private boolean write_sysfs(String path, boolean on) {
+        try {
+            FileOutputStream fos = new FileOutputStream(path);
+            byte[] bytes = new byte[2];
+            bytes[0] = (byte)(on ? '1' : '0');
+            bytes[1] = '\n';
+            fos.write(bytes);
+            fos.close();
+        } catch (Exception e) {
+            Slog.i(TAG, "Fail: " + e.getLocalizedMessage());
+            return false;
+        }
+        return true;
+    }
+	
+	// Enables or disables input devices by writing to sysfs path
+    private void enableDevices(boolean enable) {
+        boolean ret;
+        if(enable) {
+            // Turn on touch input
+            ret = write_sysfs(TS_PATH, true);
+            Slog.i(TAG, "Enabled touchscreen, success? " + ret);
+        } else {
+            // Turn off touch input
+            ret = write_sysfs(TS_PATH, false);
+            Slog.i(TAG, "Disabled touchscreen, success? " + ret);
+        }
+    }
+
     private void handleDisplayDeviceChanged(DisplayDevice device) {
         synchronized (mSyncRoot) {
             if (!mDisplayDevices.contains(device)) {
@@ -677,6 +711,15 @@
             }
 
             Slog.i(TAG, "Display device changed: " + device.getDisplayDeviceInfoLocked());
+			
+			DisplayDeviceInfo info = device.getDisplayDeviceInfoLocked();
+			
+			if(info.state == Display.STATE_ON){
+				enableDevices(true);
+			}
+			if (info.state == Display.STATE_OFF) {
+				enableDevices(false);
+			}
 
             device.applyPendingDisplayDeviceInfoChangesLocked();
             if (updateLogicalDisplaysLocked()) {
	  
